//
// Task.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Task: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: nil, maxLength: 256, pattern: nil)
    public var id: UUID
    /** Brief name of this task. */
    public var name: String
    /** Optional. Description or details of this task. */
    public var description: String?
    /** Account who owns this task. */
    public var ownerId: UUID
    public var ownerDisplayName: String
    public var sharedWith: [TaskSharedAccount]
    /** Optional. Timestamp in which this task was marked completed. */
    public var completedOn: Date?
    public var created: Date
    public var updated: Date

    public init(id: UUID, name: String, description: String? = nil, ownerId: UUID, ownerDisplayName: String, sharedWith: [TaskSharedAccount], completedOn: Date? = nil, created: Date, updated: Date) {
        self.id = id
        self.name = name
        self.description = description
        self.ownerId = ownerId
        self.ownerDisplayName = ownerDisplayName
        self.sharedWith = sharedWith
        self.completedOn = completedOn
        self.created = created
        self.updated = updated
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case description
        case ownerId = "owner_id"
        case ownerDisplayName = "owner_display_name"
        case sharedWith = "shared_with"
        case completedOn = "completed_on"
        case created
        case updated
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(ownerId, forKey: .ownerId)
        try container.encode(ownerDisplayName, forKey: .ownerDisplayName)
        try container.encode(sharedWith, forKey: .sharedWith)
        try container.encodeIfPresent(completedOn, forKey: .completedOn)
        try container.encode(created, forKey: .created)
        try container.encode(updated, forKey: .updated)
    }
}

