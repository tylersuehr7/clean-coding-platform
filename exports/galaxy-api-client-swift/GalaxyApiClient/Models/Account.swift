//
// Account.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Account: Codable, JSONEncodable, Hashable {

    static let firstNameRule = StringRule(minLength: nil, maxLength: 64, pattern: nil)
    static let lastNameRule = StringRule(minLength: nil, maxLength: 64, pattern: nil)
    /** Unique identifier of this account. */
    public var id: UUID
    /** First name of the account of this account. */
    public var firstName: String?
    /** Last name of the account of this account. */
    public var lastName: String?
    public var displayName: String
    /** Optional. Timestamp in which this account was deactivated. */
    public var deactivatedOn: Date?
    /** Indicates that this account must reset their password. */
    public var isResetPassword: Bool?
    /** Indicates that this account is verified. */
    public var isVerified: Bool?
    public var created: Date
    public var updated: Date

    public init(id: UUID, firstName: String? = nil, lastName: String? = nil, displayName: String, deactivatedOn: Date? = nil, isResetPassword: Bool? = nil, isVerified: Bool? = nil, created: Date, updated: Date) {
        self.id = id
        self.firstName = firstName
        self.lastName = lastName
        self.displayName = displayName
        self.deactivatedOn = deactivatedOn
        self.isResetPassword = isResetPassword
        self.isVerified = isVerified
        self.created = created
        self.updated = updated
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case firstName = "first_name"
        case lastName = "last_name"
        case displayName = "display_name"
        case deactivatedOn = "deactivated_on"
        case isResetPassword = "is_reset_password"
        case isVerified = "is_verified"
        case created
        case updated
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encode(displayName, forKey: .displayName)
        try container.encodeIfPresent(deactivatedOn, forKey: .deactivatedOn)
        try container.encodeIfPresent(isResetPassword, forKey: .isResetPassword)
        try container.encodeIfPresent(isVerified, forKey: .isVerified)
        try container.encode(created, forKey: .created)
        try container.encode(updated, forKey: .updated)
    }
}

