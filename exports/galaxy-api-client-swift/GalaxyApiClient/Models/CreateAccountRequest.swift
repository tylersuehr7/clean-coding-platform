//
// CreateAccountRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateAccountRequest: Codable, JSONEncodable, Hashable {

    static let usernameRule = StringRule(minLength: nil, maxLength: 256, pattern: nil)
    static let passwordRule = StringRule(minLength: nil, maxLength: 256, pattern: nil)
    static let firstNameRule = StringRule(minLength: nil, maxLength: 64, pattern: nil)
    static let lastNameRule = StringRule(minLength: nil, maxLength: 64, pattern: nil)
    public var username: String
    public var password: String
    public var firstName: String?
    public var lastName: String?
    public var isResetPassword: Bool? = false
    public var isVerified: Bool? = false

    public init(username: String, password: String, firstName: String? = nil, lastName: String? = nil, isResetPassword: Bool? = false, isVerified: Bool? = false) {
        self.username = username
        self.password = password
        self.firstName = firstName
        self.lastName = lastName
        self.isResetPassword = isResetPassword
        self.isVerified = isVerified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case username
        case password
        case firstName = "first_name"
        case lastName = "last_name"
        case isResetPassword = "is_reset_password"
        case isVerified = "is_verified"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(username, forKey: .username)
        try container.encode(password, forKey: .password)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(isResetPassword, forKey: .isResetPassword)
        try container.encodeIfPresent(isVerified, forKey: .isVerified)
    }
}

