//
// TaskAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TaskAPI {

    /**

     - parameter accountId: (path)  
     - parameter createTaskRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createTaskForAccount(accountId: UUID, createTaskRequest: CreateTaskRequest, apiResponseQueue: DispatchQueue = GalaxyApiAPI.apiResponseQueue, completion: @escaping ((_ data: CreateTaskForAccountResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return createTaskForAccountWithRequestBuilder(accountId: accountId, createTaskRequest: createTaskRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/accounts{account_id}/tasks
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter accountId: (path)  
     - parameter createTaskRequest: (body)  
     - returns: RequestBuilder<CreateTaskForAccountResponse> 
     */
    open class func createTaskForAccountWithRequestBuilder(accountId: UUID, createTaskRequest: CreateTaskRequest) -> RequestBuilder<CreateTaskForAccountResponse> {
        var localVariablePath = "/v1/accounts{account_id}/tasks"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = GalaxyApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createTaskRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateTaskForAccountResponse>.Type = GalaxyApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter taskId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteTask(taskId: UUID, apiResponseQueue: DispatchQueue = GalaxyApiAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteTaskWithRequestBuilder(taskId: taskId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v1/tasks/{task_id}
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter taskId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteTaskWithRequestBuilder(taskId: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/tasks/{task_id}"
        let taskIdPreEscape = "\(APIHelper.mapValueToPathItem(taskId))"
        let taskIdPostEscape = taskIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{task_id}", with: taskIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = GalaxyApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = GalaxyApiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter taskId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTask(taskId: UUID, apiResponseQueue: DispatchQueue = GalaxyApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetTaskResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getTaskWithRequestBuilder(taskId: taskId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/tasks/{task_id}
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter taskId: (path)  
     - returns: RequestBuilder<GetTaskResponse> 
     */
    open class func getTaskWithRequestBuilder(taskId: UUID) -> RequestBuilder<GetTaskResponse> {
        var localVariablePath = "/v1/tasks/{task_id}"
        let taskIdPreEscape = "\(APIHelper.mapValueToPathItem(taskId))"
        let taskIdPostEscape = taskIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{task_id}", with: taskIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = GalaxyApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetTaskResponse>.Type = GalaxyApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter accountId: (path)  
     - parameter limit: (query)  (optional, default to 20)
     - parameter page: (query)  (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listTasksForAccount(accountId: UUID, limit: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = GalaxyApiAPI.apiResponseQueue, completion: @escaping ((_ data: ListTasksForAccountResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listTasksForAccountWithRequestBuilder(accountId: accountId, limit: limit, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/accounts{account_id}/tasks
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter accountId: (path)  
     - parameter limit: (query)  (optional, default to 20)
     - parameter page: (query)  (optional, default to 1)
     - returns: RequestBuilder<ListTasksForAccountResponse> 
     */
    open class func listTasksForAccountWithRequestBuilder(accountId: UUID, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<ListTasksForAccountResponse> {
        var localVariablePath = "/v1/accounts{account_id}/tasks"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = GalaxyApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListTasksForAccountResponse>.Type = GalaxyApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter taskId: (path)  
     - parameter shareTaskRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func shareTask(taskId: UUID, shareTaskRequest: ShareTaskRequest, apiResponseQueue: DispatchQueue = GalaxyApiAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return shareTaskWithRequestBuilder(taskId: taskId, shareTaskRequest: shareTaskRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/tasks/{task_id}/share
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter taskId: (path)  
     - parameter shareTaskRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func shareTaskWithRequestBuilder(taskId: UUID, shareTaskRequest: ShareTaskRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/tasks/{task_id}/share"
        let taskIdPreEscape = "\(APIHelper.mapValueToPathItem(taskId))"
        let taskIdPostEscape = taskIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{task_id}", with: taskIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = GalaxyApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shareTaskRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = GalaxyApiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter taskId: (path)  
     - parameter unshareTaskRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func unshareTask(taskId: UUID, unshareTaskRequest: UnshareTaskRequest, apiResponseQueue: DispatchQueue = GalaxyApiAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return unshareTaskWithRequestBuilder(taskId: taskId, unshareTaskRequest: unshareTaskRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/tasks/{task_id}/unshare
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter taskId: (path)  
     - parameter unshareTaskRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func unshareTaskWithRequestBuilder(taskId: UUID, unshareTaskRequest: UnshareTaskRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/tasks/{task_id}/unshare"
        let taskIdPreEscape = "\(APIHelper.mapValueToPathItem(taskId))"
        let taskIdPostEscape = taskIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{task_id}", with: taskIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = GalaxyApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: unshareTaskRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = GalaxyApiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter taskId: (path)  
     - parameter updateTaskRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateTask(taskId: UUID, updateTaskRequest: UpdateTaskRequest, apiResponseQueue: DispatchQueue = GalaxyApiAPI.apiResponseQueue, completion: @escaping ((_ data: UpdateTaskResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return updateTaskWithRequestBuilder(taskId: taskId, updateTaskRequest: updateTaskRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v1/tasks/{task_id}
     - BASIC:
       - type: http
       - name: jwtAuth
     - parameter taskId: (path)  
     - parameter updateTaskRequest: (body)  
     - returns: RequestBuilder<UpdateTaskResponse> 
     */
    open class func updateTaskWithRequestBuilder(taskId: UUID, updateTaskRequest: UpdateTaskRequest) -> RequestBuilder<UpdateTaskResponse> {
        var localVariablePath = "/v1/tasks/{task_id}"
        let taskIdPreEscape = "\(APIHelper.mapValueToPathItem(taskId))"
        let taskIdPostEscape = taskIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{task_id}", with: taskIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = GalaxyApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateTaskRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpdateTaskResponse>.Type = GalaxyApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
