//
// IdentityAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class IdentityAPI {

    /**

     - parameter acquireAccessTokenRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func acquireAccessToken(acquireAccessTokenRequest: AcquireAccessTokenRequest, apiResponseQueue: DispatchQueue = GalaxyApiAPI.apiResponseQueue, completion: @escaping ((_ data: AcquireAccessTokenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return acquireAccessTokenWithRequestBuilder(acquireAccessTokenRequest: acquireAccessTokenRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/identity
     - parameter acquireAccessTokenRequest: (body)  
     - returns: RequestBuilder<AcquireAccessTokenResponse> 
     */
    open class func acquireAccessTokenWithRequestBuilder(acquireAccessTokenRequest: AcquireAccessTokenRequest) -> RequestBuilder<AcquireAccessTokenResponse> {
        let localVariablePath = "/v1/identity"
        let localVariableURLString = GalaxyApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: acquireAccessTokenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AcquireAccessTokenResponse>.Type = GalaxyApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func introspectAccessToken(apiResponseQueue: DispatchQueue = GalaxyApiAPI.apiResponseQueue, completion: @escaping ((_ data: IntrospectAccessTokenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return introspectAccessTokenWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/identity/introspect
     - BASIC:
       - type: http
       - name: jwtAuth
     - returns: RequestBuilder<IntrospectAccessTokenResponse> 
     */
    open class func introspectAccessTokenWithRequestBuilder() -> RequestBuilder<IntrospectAccessTokenResponse> {
        let localVariablePath = "/v1/identity/introspect"
        let localVariableURLString = GalaxyApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IntrospectAccessTokenResponse>.Type = GalaxyApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter refreshAccessTokenRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func refreshAccessToken(refreshAccessTokenRequest: RefreshAccessTokenRequest, apiResponseQueue: DispatchQueue = GalaxyApiAPI.apiResponseQueue, completion: @escaping ((_ data: RefreshAccessTokenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return refreshAccessTokenWithRequestBuilder(refreshAccessTokenRequest: refreshAccessTokenRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/identity/refresh
     - Proxy API for the underlying TokenRefreshView â€“ so DRF can see this
     - parameter refreshAccessTokenRequest: (body)  
     - returns: RequestBuilder<RefreshAccessTokenResponse> 
     */
    open class func refreshAccessTokenWithRequestBuilder(refreshAccessTokenRequest: RefreshAccessTokenRequest) -> RequestBuilder<RefreshAccessTokenResponse> {
        let localVariablePath = "/v1/identity/refresh"
        let localVariableURLString = GalaxyApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: refreshAccessTokenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RefreshAccessTokenResponse>.Type = GalaxyApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
